{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","runBodySegment","a","bodyPix","net","console","log","setInterval","detect","current","video","readyState","videoHeight","videoWidth","height","width","segmentPersonParts","person","coloredPartImage","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wXA+EeA,MAzEf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEnBE,EAAc,uCAAG,4BAAAC,EAAA,sEAEHC,MAFG,OAEfC,EAFe,OAGrBC,QAAQC,IAAI,yBACZC,aAAY,WACVC,EAAOJ,KACP,KANmB,2CAAH,qDASdI,EAAM,uCAAG,WAAMJ,GAAN,uBAAAF,EAAA,0DAEVJ,EAAUW,SAAkD,IAAvCX,EAAUW,QAAQC,MAAMC,WAFnC,wBAILD,EAAQZ,EAAUW,QAAQC,MAC1BE,EAAcF,EAAME,YACpBC,EAAaH,EAAMG,WAEzBb,EAAUS,QAAQK,OAASF,EAC3BZ,EAAUS,QAAQM,MAAQF,EATf,SAWUT,EAAIY,mBAAmBN,GAXjC,OAWLO,EAXK,OAYXZ,QAAQC,IAAIW,GAENC,EAAmBf,IAA0Bc,GAEnDd,IACEH,EAAUS,QACVC,EACAQ,EACA,GAAI,GAAE,GApBG,4CAAH,sDA0BZ,OAFAjB,IAGE,qBAAKkB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,IAAD,CAAQC,IAAKtB,EACbuB,MAAS,CACPC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAO,EACPb,MAAO,OACPD,OAAQ,UAGV,wBAAQM,IAAOpB,EACbqB,MAAS,CACPC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAO,EACPb,MAAO,OACTD,OAAQ,gBC3DHe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3db44f9.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as bodyPix from '@tensorflow-models/body-pix';\nimport Webcam from 'react-webcam';\nimport './App.css';\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runBodySegment = async () =>\n  {\n    const net = await bodyPix.load();\n    console.log(\"Bodypix model loaded!\");\n    setInterval(()=>{\n      detect(net);\n    },500);\n  };\n\n  const detect = async(net) =>\n  {\n    if(webcamRef.current && webcamRef.current.video.readyState === 4)\n    {\n      const video = webcamRef.current.video;\n      const videoHeight = video.videoHeight;\n      const videoWidth = video.videoWidth;\n\n      canvasRef.current.height = videoHeight;\n      canvasRef.current.width = videoWidth;\n\n      const person = await net.segmentPersonParts(video);\n      console.log(person);\n\n      const coloredPartImage = bodyPix.toColoredPartMask(person);\n\n      bodyPix.drawMask(\n        canvasRef.current,\n        video,\n        coloredPartImage,\n        0.5,0,false\n      );\n    }\n  }\n  runBodySegment();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam ref={webcamRef}\n        style = {{\n          position: 'absolute',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          left: 0,\n          right: 0,\n          textAlign: 'center',\n          zIndex:9,\n          width: '65vw',\n          height: 'auto',\n        }} />\n\n        <canvas ref = {canvasRef}\n          style = {{\n            position: 'absolute',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            left: 0,\n            right: 0,\n            textAlign: 'center',\n            zIndex:9,\n            width: '65vw',\n          height: 'auto',\n          }} />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}